/*
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(50),
    age INT,
    salary DECIMAL(10, 2),
    department VARCHAR(50)
);

INSERT INTO employees (employee_id, employee_name, age, salary, department)
VALUES
    (1, 'John Doe', 35, 50000.00, 'Sales'),
    (2, 'Jane Smith', 28, 42000.00, 'HR'),
    (3, 'Mike Johnson', 42, 60000.00, 'Finance'),
    (4, 'Emily Brown', 29, 48000.00, 'IT'),
    (5, 'David Lee', 38, 55000.00, 'Sales');

CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(50),
    age INT,
    city VARCHAR(50)
);

INSERT INTO customers (customer_id, customer_name, age, city)
VALUES
    (101, 'Alice Johnson', 25, 'New York'),
    (102, 'Bob Smith', 30, 'Los Angeles'),
    (103, 'Eva Lee', 28, 'Chicago'),
    (104, 'Mike Brown', 35, 'Houston'),
    (105, 'Sophia Wang', 22, 'San Francisco');

CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_total DECIMAL(10, 2)
);

INSERT INTO orders (order_id, customer_id, order_total)
VALUES
    (1, 101, 120.50),
    (2, 102, 250.75),
    (3, 103, 70.20),
    (4, 101, 80.00),
    (5, 105, 150.30);

CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(50),
    category VARCHAR(50),
    price DECIMAL(10, 2)
);

INSERT INTO products (product_id, product_name, category, price)
VALUES
    (201, 'Widget A', 'Electronics', 25.50),
    (202, 'Gadget B', 'Electronics', 35.20),
    (203, 'Tool C', 'Hardware', 15.80),
    (204, 'Toy D', 'Toys', 10.99),
    (205, 'Appliance E', 'Home', 75.60);

CREATE TABLE sales (
    sale_id INT PRIMARY KEY,
    product_id INT,
    sale_date DATE,
    quantity INT,
    revenue DECIMAL(10, 2)
);

INSERT INTO sales (sale_id, product_id, sale_date, quantity, revenue)
VALUES
    (301, 201, '2023-07-01', 5, 127.50),
    (302, 202, '2023-07-02', 2, 70.40),
    (303, 201, '2023-07-03', 3, 76.50),
    (304, 204, '2023-07-03', 10, 109.90),
    (305, 205, '2023-07-04', 1, 75.60);
   */

-- 1. **Basic SQL:**

   -- Task: Retrieve all columns from the "employees" table.
SELECT * FROM employees;

   -- Task: Find the names and ages of all employees whose age is above 30.
SELECT employee_name, age FROM employees WHERE age > 30;

   -- Task: List the unique cities in the "customers" table.
SELECT DISTINCT (city) FROM customers c;

   -- Task: Calculate the total number of orders in the "orders" table.
SELECT count(order_id) FROM orders o; 

   -- Task: Find the average price of all products in the "products" table.
SELECT round(avg(price),2) FROM products p;

-- 2. **SQL Grouping:**

   -- Task: Calculate the total sales amount for each product in the "sales" table.
SELECT sum(revenue) AS total_amount FROM sales s GROUP BY product_id;

   -- Task: Find the number of customers in each country from the "customers" table.
SELECT count(customer_id) FROM customers c GROUP BY city; 

   -- Task: Calculate the average salary for each department in the "employees" table.
SELECT avg(salary) FROM employees e GROUP BY department;

   -- Task: List the highest and lowest prices for each category in the "products" table.
SELECT MIN(price) as min_price,
       MAX(price) as max_price,
       category 
      FROM products p GROUP BY category;

   -- Task: Find the number of orders placed by each customer in the "orders" table.
SELECT count(order_id) orders_amount, customer_id 
FROM orders o GROUP BY customer_id;

-- 3. **SQL Aggregation:**

   -- Task: Calculate the total revenue generated by the company from the "sales" table.
SELECT sum(revenue) total FROM sales s;

   -- Task: Find the highest salary among all employees in the "employees" table.
SELECT max(salary) highest FROM employees e;

   -- Task: Calculate the average age of employees in the "employees" table.
SELECT avg(age) FROM employees e;

   -- Task: Determine the number of distinct products in the "products" table.
SELECT count(DISTINCT(product_id)) FROM products p;

   -- Task: Calculate the total quantity sold for each product in the "sales" table.
SELECT sum(quantity) total_quantity FROM sales s GROUP BY product_id ;

-- 4. **Advanced SQL:**

   -- Task: Retrieve the top 5 employees with the highest salaries from the "employees" table.
SELECT * FROM employees e 
ORDER BY salary DESC 
LIMIT 5;

   -- Task: Find the names of all customers who have placed orders in the "customers" table.
SELECT DISTINCT(customer_name)
FROM customers c 
RIGHT JOIN orders o 
ON c.customer_id = o.customer_id;

   -- Task: Calculate the running total sales for each month in the "sales" table.
SELECT SUM(revenue) AS total_sales FROM sales GROUP BY MONTH (sale_date) ;


   -- Task: Determine the average sales amount over a 3-month sliding window for each product in the "sales" table.
WITH selection AS (SELECT 	product_id, 
							MONTH(sale_date) AS month_numb, 
							avg(revenue) AS avg_rev
					FROM sales
					GROUP BY product_id)

SELECT *,
  		avg(avg_rev) OVER (PARTITION BY product_id ORDER BY month_numb
    						ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS rolling_3m_avg
FROM selection s;


   -- Task: Rank customers based on their total order amounts in the "orders" table.
WITH selection AS (
					SELECT o.customer_id, c.customer_name, o.order_total
					FROM orders o 
					LEFT JOIN customers c 
					ON o.customer_id = c.customer_id)

SELECT *, RANK () OVER(PARTITION BY customer_id ORDER BY order_total) AS ranking FROM selection;
	  

-- 5. **Window Functions in SQL:**

   -- Task: Calculate the cumulative sum of revenue for each product in the "sales" table.
SELECT p.product_name, p.price, s.quantity, sum(s.revenue) cum_rev
FROM sales s 
LEFT JOIN products p 
ON s.product_id = p.product_id 
GROUP BY p.product_id;

   -- Task: Find the moving average of prices for each product over a 5-day window in the "products" table.
SELECT p.product_name, s.sale_date, 
		avg(s.revenue) over(PARTITION BY  p.product_name ORDER BY s.sale_date
							ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS 5_day_moving_avg
					FROM products p 
					INNER JOIN sales s 
					ON p.product_id = s.product_id
					ORDER BY s.sale_date;


   -- Task: Assign percentile ranks to employees based on their salaries in the "employees" table.
SELECT employee_name, salary, percent_rank() over(ORDER BY salary)  FROM employees e;
				
   -- Task: Retrieve the previous salary for each employee in the "employees" table, considering 0 as the default value for the first row.
SELECT employee_name, salary, lag(salary, 1, 0) over(ORDER BY salary) FROM employees e;

   -- Task: Calculate the sum of revenue for each product within a 2-day window, including the current row, in the "sales" table.
SELECT *, sum(revenue) OVER (PARTITION BY product_id ORDER BY sale_date
							ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS 2days_rev_sum
FROM sales s
ORDER BY sale_date;